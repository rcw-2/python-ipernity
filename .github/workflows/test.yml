# Workflow on push & pull request
# * Check with flake8
# * Run tests with different python versions
# 

name: Test

on:
  push:
    branches:
      - main
    paths-ignore:
      - ".github/**"
      - ".gitignore"
      - ".readthedocs.yaml"
      - "docs/**"
      - "*.rst"
  pull_request:
    branches:
      - main
    paths-ignore:
      - ".github/**"
      - ".gitignore"
      - ".readthedocs.yaml"
      - "docs/**"
      - "*.rst"
  workflow_dispatch: {}

jobs:
  check:
    
    name: Flake8 Sanity Check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install flake8
      run: |
        # Install flake8 
        pip install flake8
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings.
        flake8 . --count --exit-zero --statistics
  
  build_and_test:
    
    name: Run Unit Tests
    environment: test
    needs:
    - check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
      max-parallel: 1
    steps:
    - name: Checkout Git repository
      uses: actions/checkout@v3
      with:
        fetch-depth:  0
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python }}
    - name: Install Python packages
      run: |
        # There seems to be no easy way to install dependencies
        # from pyproject.toml, so we just install the package...
        pip install -e .
        pip install coverage[toml] pytest pytest-cov
    - name: Prepare test configuration
      run: |
        # Generate test MySQL configuration
        cat >.key.json <<EOF
        {
          "api_key": "${{ secrets.API_KEY }}",
          "api_secret": "${{ secrets.API_SECRET }}"
        }
        EOF
        cat >.token.json <<EOF
        ${{ secrets.API_TOKEN }}
        EOF
    - name: Test with Pytest
      run: |
        # Run Python test
        pytest
    - name: Save Coverage Data
      if: false
      uses: actions/upload-artifact@v3
      with:
        name: coverage-data
        path: .coverage.*
    - name: Test log
      if: ${{ always() }}
      run: |
        # Show the test log
        cat test.log
  
  coverage:
    if: false
    
    name: Aggregate Test Coverage
    needs:
    - build_and_test
    
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    
    steps:
    - name: Checkout Git repository
      uses: actions/checkout@v3
      with:
        fetch-depth:  0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        # coverage report needs _version.py, so install...
        pip install -e .
        pip install coverage[toml]
    - name: Load Coverage Data 
      uses: actions/download-artifact@v3
    - name: Aggregate Coverage Data
      run: |
        # Run coverage combine
        cd coverage-data
        coverage combine
        cp .coverage ..
    - name: Coverage report
      run: |
        # Run coverage report
        coverage report -m
  

